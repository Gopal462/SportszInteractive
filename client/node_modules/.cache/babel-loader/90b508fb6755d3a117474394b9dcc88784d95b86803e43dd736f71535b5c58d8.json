{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axios from 'axios';\nexport default {\n  data() {\n    return {\n      countries: [],\n      // List of countries\n      selectedCountry: null,\n      // Currently selected country ID\n      selectedCountryDetails: null,\n      // Details of the selected country,\n      showModal: false,\n      // Controls visibility of the modal\n      newCountry: {\n        // Stores new country data\n        name: '',\n        rank: '',\n        flag: null,\n        flagName: ''\n      },\n      file: null,\n      uniqueContinent: [],\n      nameError: null,\n      // Error message for name validation\n      uploadError: null // Error message for file upload validation\n    };\n  },\n  computed: {\n    formInvalid() {\n      return this.nameError || this.uploadError || !this.newCountry.name || !this.newCountry.rank || !this.newCountry.flag;\n    }\n  },\n  mounted() {\n    // Fetch the list of countries when the component is mounted\n    axios.get('/api/countries').then(response => {\n      console.log(\"Response Data:\", response.data);\n      let responseData = response.data;\n      this.countries = responseData.countries;\n      this.uniqueContinent = responseData.uniqueContinent;\n    }).catch(error => {\n      console.error('Error fetching countries:', error);\n    });\n  },\n  methods: {\n    validateCountryName() {\n      const nameLength = this.newCountry.name.length;\n      if (nameLength < 3) {\n        this.nameError = 'Country name must be at least 3 characters long.';\n      } else if (nameLength > 20) {\n        this.nameError = 'Country name cannot exceed 20 characters.';\n      } else {\n        this.nameError = null;\n      }\n    },\n    handleFileUpload(event) {\n      const file = event.target.files[0];\n\n      // Reset upload error\n      this.uploadError = null;\n      if (file) {\n        if (file.size > 4 * 1024 * 1024) {\n          // Check if file is larger than 4MB\n          this.uploadError = 'File size must be less than 4MB.';\n          this.newCountry.flag = null;\n        } else if (!['image/jpeg', 'image/png'].includes(file.type)) {\n          // Check if file is JPG or PNG\n          this.uploadError = 'Only JPG and PNG files are allowed.';\n          this.newCountry.flag = null;\n        } else {\n          // Store the file for upload\n          this.newCountry.flag = file;\n          this.newCountry.flagName = file.name;\n        }\n      }\n    },\n    async addCountry() {\n      // Validate before sending data\n      this.validateCountryName();\n      if (this.formInvalid) {\n        return;\n      }\n      const formData = new FormData();\n      formData.append('image', this.newCountry.flag);\n      formData.append('name', this.newCountry.name);\n      formData.append('rank', this.newCountry.rank);\n      formData.append('continent', this.newCountry.continent);\n      try {\n        const response = await axios.post('/api/countries', formData, {\n          headers: {\n            'Content-Type': 'multipart/form-data'\n          }\n        });\n        console.log('Data uploaded successfully:', response.data);\n        this.showModal = false; // Close the modal\n        this.newCountry = {\n          name: '',\n          rank: '',\n          flag: null\n        };\n        this.countries.push(response.data);\n      } catch (error) {\n        console.error('Error uploading data:', error);\n      }\n    },\n    fetchCountryDetails() {\n      const country = this.countries.find(c => c.rank === this.selectedCountry);\n      if (country) {\n        // Fetch details for the selected country\n        axios.get(`/api/countries/${this.selectedCountry}`).then(response => {\n          this.selectedCountryDetails = response.data;\n        }).catch(error => {\n          console.error('Error fetching country details:', error);\n        });\n      } else {\n        this.selectedCountryDetails = null;\n      }\n    }\n  }\n};","map":{"version":3,"names":["axios","data","countries","selectedCountry","selectedCountryDetails","showModal","newCountry","name","rank","flag","flagName","file","uniqueContinent","nameError","uploadError","computed","formInvalid","mounted","get","then","response","console","log","responseData","catch","error","methods","validateCountryName","nameLength","length","handleFileUpload","event","target","files","size","includes","type","addCountry","formData","FormData","append","continent","post","headers","push","fetchCountryDetails","country","find","c"],"sources":["src/components/HomePages.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <!-- Modal Component -->\r\n    <div v-if=\"showModal\" class=\"modal-overlay\">\r\n      <div class=\"modal-content\">\r\n        <h2>Add New Country</h2>\r\n        <form @submit.prevent=\"addCountry\">\r\n          <label for=\"country-name\">Country Name:</label>&nbsp;\r\n          <input type=\"text\" v-model=\"newCountry.name\" id=\"country-name\" required @blur=\"validateCountryName\">\r\n          <span v-if=\"nameError\" class=\"error\">{{ nameError }}</span>\r\n          <br/><br/>\r\n          <label for=\"country-continent\">Select Continent:</label>&nbsp;\r\n          <select v-model=\"newCountry.continent\">\r\n            <option v-for=\"cont in uniqueContinent\" :key=\"cont.id\" :value=\"cont.continent\">\r\n              {{ cont.continent }}\r\n            </option>\r\n          </select>\r\n          <br/><br/>\r\n          <label for=\"country-rank\">Country Rank:</label>&nbsp;\r\n          <input type=\"number\" v-model=\"newCountry.rank\" id=\"country-rank\" required>\r\n          <br/><br/>\r\n          <label for=\"country-flag\">Country Flag:</label>&nbsp;\r\n          <input type=\"file\" @change=\"handleFileUpload\" id=\"country-flag\" accept=\".jpg, .png\" required>\r\n          <span v-if=\"uploadError\" class=\"error\">{{ uploadError }}</span>\r\n          <br/><br/>\r\n          <button type=\"submit\" :disabled=\"formInvalid\">Add Country</button>\r\n          <button type=\"button\" @click=\"showModal = false\">Cancel</button>\r\n        </form>\r\n      </div>\r\n    </div>\r\n    <div class=\"Main\" v-if=\"!showModal\">\r\n      <button @click=\"showModal = true\">Add New Country</button>\r\n      <h1>Countries List</h1>\r\n      <select v-model=\"selectedCountry\" @change=\"fetchCountryDetails\">\r\n        <option v-for=\"country in countries\" :key=\"country.rank\" :value=\"country.rank\">\r\n          {{ country.name }}\r\n        </option>\r\n      </select>\r\n\r\n      <div v-if=\"selectedCountryDetails\">\r\n        <h2>Details of Selected Country</h2>\r\n        <p><strong>Name:</strong> {{ selectedCountryDetails.name }}</p>\r\n        <p><strong>Continent:</strong> {{ selectedCountryDetails.continent }}</p>\r\n        <p><strong>Rank:</strong> {{ selectedCountryDetails.rank }}</p>\r\n        <img :src=\"`/api/${selectedCountryDetails.flag}`\" alt=\"Country Image\" v-if=\"selectedCountryDetails.flag\" />\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport axios from 'axios';\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      countries: [], // List of countries\r\n      selectedCountry: null, // Currently selected country ID\r\n      selectedCountryDetails: null, // Details of the selected country,\r\n      showModal: false, // Controls visibility of the modal\r\n      newCountry: { // Stores new country data\r\n        name: '',\r\n        rank: '',\r\n        flag: null,\r\n        flagName: ''\r\n      },\r\n      file: null,\r\n      uniqueContinent: [],\r\n      nameError: null, // Error message for name validation\r\n      uploadError: null, // Error message for file upload validation\r\n    };\r\n  },\r\n  computed: {\r\n    formInvalid() {\r\n      return this.nameError || this.uploadError || !this.newCountry.name || !this.newCountry.rank || !this.newCountry.flag;\r\n    }\r\n  },\r\n  mounted() {\r\n    // Fetch the list of countries when the component is mounted\r\n    axios.get('/api/countries')\r\n      .then(response => {\r\n        console.log(\"Response Data:\",response.data)\r\n        let responseData = response.data;\r\n        this.countries = responseData.countries;\r\n        this.uniqueContinent = responseData.uniqueContinent;\r\n      })\r\n      .catch(error => {\r\n        console.error('Error fetching countries:', error);\r\n      });\r\n  },\r\n  methods: {\r\n    validateCountryName() {\r\n      const nameLength = this.newCountry.name.length;\r\n      if (nameLength < 3) {\r\n        this.nameError = 'Country name must be at least 3 characters long.';\r\n      } else if (nameLength > 20) {\r\n        this.nameError = 'Country name cannot exceed 20 characters.';\r\n      } else {\r\n        this.nameError = null;\r\n      }\r\n    },\r\n    handleFileUpload(event) {\r\n      const file = event.target.files[0];\r\n      \r\n      // Reset upload error\r\n      this.uploadError = null;\r\n\r\n      if (file) {\r\n        if (file.size > 4 * 1024 * 1024) { // Check if file is larger than 4MB\r\n          this.uploadError = 'File size must be less than 4MB.';\r\n          this.newCountry.flag = null;\r\n        } else if (!['image/jpeg', 'image/png'].includes(file.type)) { // Check if file is JPG or PNG\r\n          this.uploadError = 'Only JPG and PNG files are allowed.';\r\n          this.newCountry.flag = null;\r\n        } else {\r\n          // Store the file for upload\r\n          this.newCountry.flag = file;\r\n          this.newCountry.flagName = file.name;\r\n        }\r\n      }\r\n    },\r\n    async addCountry() {\r\n      // Validate before sending data\r\n      this.validateCountryName();\r\n      if (this.formInvalid) {\r\n        return;\r\n      }\r\n      \r\n      const formData = new FormData();\r\n      formData.append('image', this.newCountry.flag);\r\n      formData.append('name', this.newCountry.name);\r\n      formData.append('rank', this.newCountry.rank);\r\n      formData.append('continent', this.newCountry.continent);\r\n      try {\r\n        const response = await axios.post('/api/countries', formData, {\r\n          headers: {\r\n            'Content-Type': 'multipart/form-data',\r\n          }\r\n        });\r\n        console.log('Data uploaded successfully:', response.data);\r\n        this.showModal = false; // Close the modal\r\n        this.newCountry = { name: '', rank: '', flag: null }; \r\n        this.countries.push(response.data)\r\n      } catch (error) {\r\n        console.error('Error uploading data:', error);\r\n      }\r\n    },\r\n    fetchCountryDetails() {\r\n      const country = this.countries.find(c => c.rank === this.selectedCountry);\r\n\r\n      if (country) {\r\n        // Fetch details for the selected country\r\n        axios.get(`/api/countries/${this.selectedCountry}`)\r\n          .then(response => {\r\n            this.selectedCountryDetails = response.data;\r\n          })\r\n          .catch(error => {\r\n            console.error('Error fetching country details:', error);\r\n          });\r\n      } else {\r\n        this.selectedCountryDetails = null;\r\n      }\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.error {\r\n  color: red;\r\n  font-size: 0.875rem;\r\n}\r\n</style>\r\n"],"mappings":";AAmDA,OAAAA,KAAA;AAEA;EACAC,KAAA;IACA;MACAC,SAAA;MAAA;MACAC,eAAA;MAAA;MACAC,sBAAA;MAAA;MACAC,SAAA;MAAA;MACAC,UAAA;QAAA;QACAC,IAAA;QACAC,IAAA;QACAC,IAAA;QACAC,QAAA;MACA;MACAC,IAAA;MACAC,eAAA;MACAC,SAAA;MAAA;MACAC,WAAA;IACA;EACA;EACAC,QAAA;IACAC,YAAA;MACA,YAAAH,SAAA,SAAAC,WAAA,UAAAR,UAAA,CAAAC,IAAA,UAAAD,UAAA,CAAAE,IAAA,UAAAF,UAAA,CAAAG,IAAA;IACA;EACA;EACAQ,QAAA;IACA;IACAjB,KAAA,CAAAkB,GAAA,mBACAC,IAAA,CAAAC,QAAA;MACAC,OAAA,CAAAC,GAAA,mBAAAF,QAAA,CAAAnB,IAAA;MACA,IAAAsB,YAAA,GAAAH,QAAA,CAAAnB,IAAA;MACA,KAAAC,SAAA,GAAAqB,YAAA,CAAArB,SAAA;MACA,KAAAU,eAAA,GAAAW,YAAA,CAAAX,eAAA;IACA,GACAY,KAAA,CAAAC,KAAA;MACAJ,OAAA,CAAAI,KAAA,8BAAAA,KAAA;IACA;EACA;EACAC,OAAA;IACAC,oBAAA;MACA,MAAAC,UAAA,QAAAtB,UAAA,CAAAC,IAAA,CAAAsB,MAAA;MACA,IAAAD,UAAA;QACA,KAAAf,SAAA;MACA,WAAAe,UAAA;QACA,KAAAf,SAAA;MACA;QACA,KAAAA,SAAA;MACA;IACA;IACAiB,iBAAAC,KAAA;MACA,MAAApB,IAAA,GAAAoB,KAAA,CAAAC,MAAA,CAAAC,KAAA;;MAEA;MACA,KAAAnB,WAAA;MAEA,IAAAH,IAAA;QACA,IAAAA,IAAA,CAAAuB,IAAA;UAAA;UACA,KAAApB,WAAA;UACA,KAAAR,UAAA,CAAAG,IAAA;QACA,wCAAA0B,QAAA,CAAAxB,IAAA,CAAAyB,IAAA;UAAA;UACA,KAAAtB,WAAA;UACA,KAAAR,UAAA,CAAAG,IAAA;QACA;UACA;UACA,KAAAH,UAAA,CAAAG,IAAA,GAAAE,IAAA;UACA,KAAAL,UAAA,CAAAI,QAAA,GAAAC,IAAA,CAAAJ,IAAA;QACA;MACA;IACA;IACA,MAAA8B,WAAA;MACA;MACA,KAAAV,mBAAA;MACA,SAAAX,WAAA;QACA;MACA;MAEA,MAAAsB,QAAA,OAAAC,QAAA;MACAD,QAAA,CAAAE,MAAA,eAAAlC,UAAA,CAAAG,IAAA;MACA6B,QAAA,CAAAE,MAAA,cAAAlC,UAAA,CAAAC,IAAA;MACA+B,QAAA,CAAAE,MAAA,cAAAlC,UAAA,CAAAE,IAAA;MACA8B,QAAA,CAAAE,MAAA,mBAAAlC,UAAA,CAAAmC,SAAA;MACA;QACA,MAAArB,QAAA,SAAApB,KAAA,CAAA0C,IAAA,mBAAAJ,QAAA;UACAK,OAAA;YACA;UACA;QACA;QACAtB,OAAA,CAAAC,GAAA,gCAAAF,QAAA,CAAAnB,IAAA;QACA,KAAAI,SAAA;QACA,KAAAC,UAAA;UAAAC,IAAA;UAAAC,IAAA;UAAAC,IAAA;QAAA;QACA,KAAAP,SAAA,CAAA0C,IAAA,CAAAxB,QAAA,CAAAnB,IAAA;MACA,SAAAwB,KAAA;QACAJ,OAAA,CAAAI,KAAA,0BAAAA,KAAA;MACA;IACA;IACAoB,oBAAA;MACA,MAAAC,OAAA,QAAA5C,SAAA,CAAA6C,IAAA,CAAAC,CAAA,IAAAA,CAAA,CAAAxC,IAAA,UAAAL,eAAA;MAEA,IAAA2C,OAAA;QACA;QACA9C,KAAA,CAAAkB,GAAA,wBAAAf,eAAA,IACAgB,IAAA,CAAAC,QAAA;UACA,KAAAhB,sBAAA,GAAAgB,QAAA,CAAAnB,IAAA;QACA,GACAuB,KAAA,CAAAC,KAAA;UACAJ,OAAA,CAAAI,KAAA,oCAAAA,KAAA;QACA;MACA;QACA,KAAArB,sBAAA;MACA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}