{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axios from 'axios';\nexport default {\n  data() {\n    return {\n      countries: [],\n      // List of countries\n      selectedCountry: null,\n      // Currently selected country ID\n      selectedCountryDetails: null,\n      // Details of the selected country,\n      showModal: false,\n      // Controls visibility of the modal\n      newCountry: {\n        // Stores new country data\n        name: '',\n        rank: '',\n        flag: null\n      },\n      file: null\n    };\n  },\n  mounted() {\n    // Fetch the list of countries when the component is mounted\n    axios.get('/api/countries').then(response => {\n      this.countries = response.data;\n    }).catch(error => {\n      console.error('Error fetching countries:', error);\n    });\n  },\n  methods: {\n    handleFileUpload(event) {\n      const file = event.target.files[0];\n\n      // Reset upload error\n      this.uploadError = null;\n      if (file) {\n        if (file.size > 4 * 1024 * 1024) {\n          // Check if file is larger than 4MB\n          this.uploadError = 'File size must be less than 4MB.';\n          this.newCountry.flag = null;\n        } else if (!['image/jpeg', 'image/png'].includes(file.type)) {\n          // Check if file is JPG or PNG\n          this.uploadError = 'Only JPG and PNG files are allowed.';\n          this.newCountry.flag = null;\n        } else {\n          // Store the file for upload\n          this.newCountry.flag = file;\n        }\n      }\n    },\n    onFileSelected: function () {\n      this.image_error = null;\n      var input = this.$refs.file;\n      if (input.files && input.files[0]) {\n        this.file = this.$refs.file.files[0];\n        if (this.file.size > 4 * 1024 * 1024) {\n          this.image_error = \"File size should not be greater than 4Mb. File can not be uploaded\";\n          return;\n        }\n        const reader = new FileReader();\n        reader.onloadend = () => {\n          let rawImg = reader.result;\n          console.log(\"rawImg :\", this.rawImg);\n          let rawImgObj = {\n            name: this.file.name,\n            type: this.file.type,\n            image: this.file\n          };\n          this.newCountry.flag = rawImgObj;\n        };\n        reader.readAsDataURL(this.file);\n      }\n    },\n    addCountry() {\n      // You can customize this to send the data to your server\n      console.log(\"New Country:\", this.newCountry);\n      axios.post('/api/countries', this.newCountry).then(response => {\n        this.countries.push(response.data); // Add the new country to the list\n        this.showModal = false; // Close the modal\n        this.newCountry = {\n          name: '',\n          rank: '',\n          flag: null\n        }; // Reset the form\n      }).catch(error => {\n        console.error('Error adding country:', error);\n      });\n    },\n    fetchCountryDetails() {\n      const country = this.countries.find(c => c.rank === this.selectedCountry);\n      if (country) {\n        // Fetch details for the selected country\n        axios.get(`/api/countries/${this.selectedCountry}`).then(response => {\n          this.selectedCountryDetails = response.data;\n        }).catch(error => {\n          console.error('Error fetching country details:', error);\n        });\n      } else {\n        this.selectedCountryDetails = null;\n      }\n    }\n  }\n};","map":{"version":3,"names":["axios","data","countries","selectedCountry","selectedCountryDetails","showModal","newCountry","name","rank","flag","file","mounted","get","then","response","catch","error","console","methods","handleFileUpload","event","target","files","uploadError","size","includes","type","onFileSelected","image_error","input","$refs","reader","FileReader","onloadend","rawImg","result","log","rawImgObj","image","readAsDataURL","addCountry","post","push","fetchCountryDetails","country","find","c"],"sources":["src/components/HomePages.vue"],"sourcesContent":["<template>\r\n    <div>\r\n    <!-- Modal Component -->\r\n    <div v-if=\"showModal\" class=\"modal-overlay\">\r\n      <div class=\"modal-content\">\r\n        <h2>Add New Country</h2>\r\n        <form @submit.prevent=\"addCountry\">\r\n          <label for=\"country-name\">Country Name:</label>&nbsp;\r\n          <input type=\"text\" v-model=\"newCountry.name\" id=\"country-name\" required>\r\n          <br/>  <br/>\r\n          <label for=\"country-rank\">Country Rank:</label>&nbsp;\r\n          <input type=\"number\" v-model=\"newCountry.rank\" id=\"country-rank\" required>\r\n          <br/>  <br/>\r\n          <label for=\"country-flag\">Country Flag:</label>&nbsp;\r\n          <!-- <input type=\"file\" @change=\"handleFileUpload\" id=\"country-flag\" accept=\".jpg, .png\" required> -->\r\n          <input\r\n          class=\"form-control\"\r\n          type=\"file\"\r\n          ref=\"file\"\r\n          label=\"Image\"\r\n          @change=\"onFileSelected\"\r\n          accept=\".jpg, .png\" required\r\n        />\r\n          <br/>  <br/>\r\n          <button type=\"submit\">Add Country</button>\r\n          <button type=\"button\" @click=\"showModal = false\">Cancel</button>\r\n        </form>\r\n      </div>\r\n    </div>\r\n    <div class=\"Main\" v-if=\"!showModal\">\r\n      <button @click=\"showModal = true\" >Add New Country</button>\r\n      <h1>Countries List</h1>\r\n      <select v-model=\"selectedCountry\" @change=\"fetchCountryDetails\">\r\n        <option v-for=\"country in countries\" :key=\"country.rank\" :value=\"country.rank\">\r\n          {{ country.name }}\r\n        </option>\r\n      </select>\r\n  \r\n      <div v-if=\"selectedCountryDetails\">\r\n        <h2>Details of Selected Country</h2>\r\n        <p><strong>Name:</strong> {{ selectedCountryDetails.name }}</p>\r\n        <p><strong>Rank:</strong> {{ selectedCountryDetails.rank }}</p>\r\n        <img :src=\"`/api/${selectedCountryDetails.flag}`\" alt=\"Country Image\" v-if=\"selectedCountryDetails.flag\" />\r\n      </div>\r\n    </div>\r\n  </div>\r\n  </template>\r\n  \r\n  <script>\r\n  import axios from 'axios';\r\n  \r\n  export default {\r\n    data() {\r\n      return {\r\n        countries: [], // List of countries\r\n        selectedCountry: null, // Currently selected country ID\r\n        selectedCountryDetails: null, // Details of the selected country,\r\n        showModal: false, // Controls visibility of the modal\r\n        newCountry: { // Stores new country data\r\n        name: '',\r\n        rank: '',\r\n        flag: null,\r\n      },\r\n      file:null\r\n      };\r\n    },\r\n    mounted() {\r\n      // Fetch the list of countries when the component is mounted\r\n      axios.get('/api/countries')\r\n        .then(response => {\r\n          this.countries = response.data;\r\n        })\r\n        .catch(error => {\r\n          console.error('Error fetching countries:', error);\r\n        });\r\n    },\r\n    methods: {\r\n      handleFileUpload(event) {\r\n      const file = event.target.files[0];\r\n      \r\n      // Reset upload error\r\n      this.uploadError = null;\r\n\r\n      if (file) {\r\n        if (file.size > 4 * 1024 * 1024) { // Check if file is larger than 4MB\r\n          this.uploadError = 'File size must be less than 4MB.';\r\n          this.newCountry.flag = null;\r\n        } else if (!['image/jpeg', 'image/png'].includes(file.type)) { // Check if file is JPG or PNG\r\n          this.uploadError = 'Only JPG and PNG files are allowed.';\r\n          this.newCountry.flag = null;\r\n        } else {\r\n          // Store the file for upload\r\n          this.newCountry.flag = file;\r\n        }\r\n      }\r\n    },\r\n    onFileSelected: function () {\r\n      this.image_error = null;\r\n      var input = this.$refs.file;\r\n      if (input.files && input.files[0]) {\r\n        this.file = this.$refs.file.files[0];\r\n        if (this.file.size >  4 * 1024 * 1024) {\r\n          this.image_error =\r\n            \"File size should not be greater than 4Mb. File can not be uploaded\";\r\n          return;\r\n        }\r\n        const reader = new FileReader();\r\n        reader.onloadend = () => {\r\n          let rawImg = reader.result;\r\n          console.log(\"rawImg :\", this.rawImg);\r\n          let rawImgObj = {\r\n            name: this.file.name,\r\n            type: this.file.type,\r\n            image: this.file,\r\n          };\r\n          this.newCountry.flag = rawImgObj;\r\n        };\r\n        reader.readAsDataURL(this.file);\r\n      } \r\n    },\r\n      addCountry() {\r\n      // You can customize this to send the data to your server\r\n      console.log(\"New Country:\", this.newCountry);\r\n      \r\n      axios.post('/api/countries', this.newCountry)\r\n        .then(response => {\r\n          this.countries.push(response.data); // Add the new country to the list\r\n          this.showModal = false; // Close the modal\r\n          this.newCountry = { name: '', rank: '', flag: null }; // Reset the form\r\n        })\r\n        .catch(error => {\r\n          console.error('Error adding country:', error);\r\n        });\r\n    },\r\n      fetchCountryDetails() {\r\n        const country = this.countries.find(c => c.rank === this.selectedCountry);\r\n  \r\n        if (country) {\r\n          // Fetch details for the selected country\r\n          axios.get(`/api/countries/${this.selectedCountry}`)\r\n            .then(response => {\r\n              this.selectedCountryDetails = response.data;\r\n            })\r\n            .catch(error => {\r\n              console.error('Error fetching country details:', error);\r\n            });\r\n        } else {\r\n          this.selectedCountryDetails = null;\r\n        }\r\n      }\r\n    }\r\n  };\r\n  </script>\r\n  \r\n  <style scoped>\r\n  /* Add styles here if needed */\r\n  </style>\r\n  "],"mappings":";AAiDA,OAAAA,KAAA;AAEA;EACAC,KAAA;IACA;MACAC,SAAA;MAAA;MACAC,eAAA;MAAA;MACAC,sBAAA;MAAA;MACAC,SAAA;MAAA;MACAC,UAAA;QAAA;QACAC,IAAA;QACAC,IAAA;QACAC,IAAA;MACA;MACAC,IAAA;IACA;EACA;EACAC,QAAA;IACA;IACAX,KAAA,CAAAY,GAAA,mBACAC,IAAA,CAAAC,QAAA;MACA,KAAAZ,SAAA,GAAAY,QAAA,CAAAb,IAAA;IACA,GACAc,KAAA,CAAAC,KAAA;MACAC,OAAA,CAAAD,KAAA,8BAAAA,KAAA;IACA;EACA;EACAE,OAAA;IACAC,iBAAAC,KAAA;MACA,MAAAV,IAAA,GAAAU,KAAA,CAAAC,MAAA,CAAAC,KAAA;;MAEA;MACA,KAAAC,WAAA;MAEA,IAAAb,IAAA;QACA,IAAAA,IAAA,CAAAc,IAAA;UAAA;UACA,KAAAD,WAAA;UACA,KAAAjB,UAAA,CAAAG,IAAA;QACA,wCAAAgB,QAAA,CAAAf,IAAA,CAAAgB,IAAA;UAAA;UACA,KAAAH,WAAA;UACA,KAAAjB,UAAA,CAAAG,IAAA;QACA;UACA;UACA,KAAAH,UAAA,CAAAG,IAAA,GAAAC,IAAA;QACA;MACA;IACA;IACAiB,cAAA,WAAAA,CAAA;MACA,KAAAC,WAAA;MACA,IAAAC,KAAA,QAAAC,KAAA,CAAApB,IAAA;MACA,IAAAmB,KAAA,CAAAP,KAAA,IAAAO,KAAA,CAAAP,KAAA;QACA,KAAAZ,IAAA,QAAAoB,KAAA,CAAApB,IAAA,CAAAY,KAAA;QACA,SAAAZ,IAAA,CAAAc,IAAA;UACA,KAAAI,WAAA,GACA;UACA;QACA;QACA,MAAAG,MAAA,OAAAC,UAAA;QACAD,MAAA,CAAAE,SAAA;UACA,IAAAC,MAAA,GAAAH,MAAA,CAAAI,MAAA;UACAlB,OAAA,CAAAmB,GAAA,kBAAAF,MAAA;UACA,IAAAG,SAAA;YACA9B,IAAA,OAAAG,IAAA,CAAAH,IAAA;YACAmB,IAAA,OAAAhB,IAAA,CAAAgB,IAAA;YACAY,KAAA,OAAA5B;UACA;UACA,KAAAJ,UAAA,CAAAG,IAAA,GAAA4B,SAAA;QACA;QACAN,MAAA,CAAAQ,aAAA,MAAA7B,IAAA;MACA;IACA;IACA8B,WAAA;MACA;MACAvB,OAAA,CAAAmB,GAAA,sBAAA9B,UAAA;MAEAN,KAAA,CAAAyC,IAAA,wBAAAnC,UAAA,EACAO,IAAA,CAAAC,QAAA;QACA,KAAAZ,SAAA,CAAAwC,IAAA,CAAA5B,QAAA,CAAAb,IAAA;QACA,KAAAI,SAAA;QACA,KAAAC,UAAA;UAAAC,IAAA;UAAAC,IAAA;UAAAC,IAAA;QAAA;MACA,GACAM,KAAA,CAAAC,KAAA;QACAC,OAAA,CAAAD,KAAA,0BAAAA,KAAA;MACA;IACA;IACA2B,oBAAA;MACA,MAAAC,OAAA,QAAA1C,SAAA,CAAA2C,IAAA,CAAAC,CAAA,IAAAA,CAAA,CAAAtC,IAAA,UAAAL,eAAA;MAEA,IAAAyC,OAAA;QACA;QACA5C,KAAA,CAAAY,GAAA,wBAAAT,eAAA,IACAU,IAAA,CAAAC,QAAA;UACA,KAAAV,sBAAA,GAAAU,QAAA,CAAAb,IAAA;QACA,GACAc,KAAA,CAAAC,KAAA;UACAC,OAAA,CAAAD,KAAA,oCAAAA,KAAA;QACA;MACA;QACA,KAAAZ,sBAAA;MACA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}